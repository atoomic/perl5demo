=encoding utf8

=head1 NAME

perl5252cdelta - what is new for cperl v5.25.2

=head1 DESCRIPTION

This document describes the differences between the cperl 5.25.1
and the cperl 5.25.2 development releases.

=head1 Security

=head2 use utf8 'Script'

In order to avoid TR39 confusable security hacks, we add the following
unicode rules for identifiers and literals with B<mixed script> properties:

=over

=item *

The 'Common', 'Latin' and 'Inherited' scripts are always allowed and
don't need to be declared.

=item *

The first non-default unicode script for an identifier is
the only allowed one. This qualifies as single-script.
More scripts lead to parsers errors.

=item *

Additional unicode scripts can and should be declared via
B<use utf8 'Greek', 'script-name2'...>. This allows mixed scripts in
identifiers. This can be scoped in blocks.

=back

See L<http://www.unicode.org/reports/tr39/#Mixed_Script_Detection> and
L<[cperl #229]|https://github.com/perl11/cperl/issues/229>

This holds for all identifiers (i.e. all names: package, gv, sub,
variables) and literal numbers.

Currently there exist 131 scripts, see L<utf8/"Valid scripts">.

=head2 Unicode normalization of identifiers/names

All stored utf8 names, identifiers and literals are parsed and stored
as normalized NFC unicode, which prevents from various TR39 and TR36
unicode confusable and spoofing security problems.

However, dynamically created symbols via string refs are not normalized.
C<${"$decomposed"}> stays decomposed.

Note that even perl6 stores different names for confusables, which
match each other due to their NFG rules on their string
matchers. perl5 matches strictly binary, which leads to confusable and
spoofing security problems.

See L<[cperl #228]|https://github.com/perl11/cperl/issues/228>,
L<http://www.unicode.org/reports/tr36/>,
L<http://www.unicode.org/reports/tr39>,
L<http://www.unicode.org/reports/tr31/>
and the Python 3 discussion 2007 on PEP 3131
L<https://docs.python.org/3/reference/lexical_analysis.html#identifiers>.

Python 3 normalizes to NFKC (Compatibility Decomposition, followed by
Canonical Composition), cperl uses both canonical transformations.
See L<http://unicode.org/reports/tr15/#Norm_Forms> for the difference.
Basically NFKC transforms to shorter ligatures. NFC is recommended by TR15.

=head2 No binary symbols

Fallback to the secure behvaiour as before v5.16 and strip symbol
names of everything after the first \0 character.  This protects from
creating binary symbols as with C<no strict 'refs'; ${"a\0\hidden"}>,
which were especially problematic for package names, which were mapped
1:1 to filenames.  With the default warning 'security' in effect, a
warning is produced by the L<perlapi/warn_security> API, same as for
unsafe syscalls since 5.20.

See L<perldiag/Invalid \0 character in string for SYMBOL: %s>
and L<[cperl #233]|https://github.com/perl11/cperl/issues/233>.

=head2 hash seed exposure

cperl5.22.2 added a restraint to expose the internal hash secret seed
via the environment variable PERL_HASH_SEED_DEBUG=1 to be hidden in taint mode.
See L<[cperl #114]|https://github.com/perl11/cperl/issues/114>
and L<perl5222cdelta/Core Enhancements>.

    PERL_HASH_SEED_DEBUG=1 cperl5.22.2 -e1 =>
    HASH_FUNCTION = FNV1A HASH_SEED = 0xecfb00eb PERTURB_KEYS = 0 (TOP)

    PERL_HASH_SEED_DEBUG=1 cperl5.22.2 -t -e1 => empty

But unfortunately not many perl services are actually protected with
C<-t>, even if cperl fixed taint mode to be actually secure. The
seed exposure is only needed for a debugging perl, and actually is
security relevant.

So C<PERL_HASH_SEED_DEBUG=1> will now hide the seed value in
non-DEBUGGING builds.

    PERL_HASH_SEED_DEBUG=1 cperl5.25.2 -e1 =>
    HASH_FUNCTION = FNV1A HASH_SEED = <hidden> PERTURB_KEYS = 0 (TOP)

Note that the seed is still trivially exposable via other means if a
local script can be executed, as the seed value is readable from a
fixed memory offset via unpack "P". That's why cperl fixed hash table
security via proper means in the collision resolution, not via a slow
hash function, and not via order hiding as perl5 believes in.

More discussion at L<https://github.com/google/highwayhash/issues/28> and
L<https://github.com/google/highwayhash/issues/29>.

=head2 chdir heap-buffer-overflow

Fixed heap-buffer-overflow in chdir without argument. make chdir allocate the stack
it needs for the result, overwriting one stack entry. Note that the perl stack is on
the heap, so it's not that dramatic.
L<[perl #129130]|https://rt.perl.org/Public/Bug/Display.html?id=129130>

=head1 Deprecations

=head2 do_open, do_close macros

Those macros clash on darwin XTools with the system iostream
C<_OutputIterator> methods. We need to use the fullname
B<Perl_do_open> and B<Perl_do_close> functions whenever perl needs to be
embedded into C++ projects.

With the system C++ compiler on darwin C<do_open>, C<do_close> are now
undefined.  See L<[cperl #227]|https://github.com/perl11/cperl/issues/227>

=head2 Removed ' as package seperator

Made something like C<sub foo'bar;> a syntax error.
C<'> is not replaced by C<::> anymore when used as package seperator.
This was deprecated 10 years ago.

cperl fixed the L</c2ph> core utility using this last remaining perl4'ism,
and removed the C<isn't> method from L<Test::More>.
In a later versions C<'> can be reenabled as proper IDContinue character for
identifiers, e.g. for Test::More C<isn't>.

See L<[cperl #217]|https://github.com/perl11/cperl/issues/217>.

=head1 Performance Enhancements

=over 4

=item *

Most NULL ops are now removed in the peephole optimizer. Check for
C<#if defined(PERL_REMOVE_OP_NULL)> in your XS module if you hardcoded
any NULL-sensitive op-tree structure. See how many with C<-Dk>.

=item *

C<-DPERL_FAKE_SIGNATURE> is now default, making most function calls 2x faster.
See L</fake_signatures>

=item *

The new compiler option support allows generation of much faster
code. I.e. clang-4.0 with -flto or zapcc produce ~20% faster code.

=back

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item Term-ANSIColor 4.06

Add aliases ansi16 through ansi255 and on_ansi16 through on_ansi255
(plus the corresponding constants) for the grey and rgb colors so that
one can refer to all of the 256 ANSI colors with consistent names.
These are aliases; the colors returned by uncolor will still use the
grey and rgb names.  (#118267)

=item podlators 4.09

Add the t/data/snippets tests.

Use Pod::Simple's logic to determine the native code
points for NO BREAK SPACE and SOFT HYPHEN instead of hard-coding the
ASCII values.  Hopefully fixes the case of mysterious disappearing
open brackets on EBCDIC systems.  (#118240)

=item Locale-Codes 3.42

Added Czech republic aliases back in

=item Archive-Tar 2.18

Better 09_roundtrip.t tests.

=item B-Debug 1.24

Support 5.25.6 split optimization

=item Devel-NYTProf 6.04

Fix -Wc++11-compat warnings, and various minor issues.

=item Devel-PPPort 3.35_02

Fix -Wc++11-compat warnings

=item Internals-DumpArenas 0.12_05

Fix -Wc++11-compat warnings

=item Socket 2.024_05

Fix -Wc++11-compat warnings

=item POSIX 1.65_02

Fix -Wc++11-compat warnings

=item Scalar-List-Utils 1.46_08

Fix -Wc++11-compat warnings.

Warn and strip \0 in names. [cperl #233]

=item Cwd  4.65c

Fix -Wc++11-compat warnings

=item Data-Dumper  2.163

Fix -Wc++11-compat warnings

=item Time-Local  1.25

Less runtime memory: demand-load Carp, Config.

=item Time-HiRes  1.9741_01

Fix -Wc++11-compat warnings
Keep our better C++ fixes
Keep our t/usleep.t, t/alarm.t, t/utime.t fixes.
Keep our do_openn improvements in typemap.

from upstream:

- El Capitan compatibility
- use CLOCK_REALTIME for clock_nanosleep scan
- include file consistency in scans
- use clockid_t consistently
- use hv_fetchs()
- scan for clockid_t (needed for macos Sierra)
- darwin lacks clockid_t [rt.cpan.org #129789]

=item Storable 3.02c

Fix -Wc++11-compat warnings

=item Encode 2.88

various upstream fixes.
plus g++-6 -fpermissive and -Wc++11-compat fixes.
our local make -s silent patches and various others are now all upstream.

=item ExtUtils-Constant 0.23_04

Fix -Wc++11-compat warnings in generated const-xs.inc code.

=item ExtUtils-ParseXS 3.32_01

Fix visibility declaration of XS_EXTERNAL for C<-flto> and
C<-fvisibility=hidden>.

=item Test::More  1.401015c

Removed the deprecated C<isn't> method, using the C<'> package seperator.

=item App::Cpan 1.64_01

Fixed C<CPAN::Shell->expand("Module", "Bundle::...")> error with Bundles,
a regression from 1.63 and prev. cperl releases up to 5.25.0c.
cperl only.
C<cpan .> in local directory still broken (upstream).

=item DynaLoader 2.06c

Fixed build dependency for F<dlboot.c>. No excessive rebuilds anymore.

=item Cpanel-JSON-XS 3.0225

- Fixes for g++-6, stricter -fpermissive and -Wc++11-compat.

- Added tests for ill-formed utf8 sequences from Encode.

- modfl() mingw 4.0 runtime bug [perl #125924]

- Tested with the comprehensive JSON decode spectests from
  http://seriot.ch/parsing_json.html. Not added to core. #72

- decode with BOM: UTF-8, UTF-16, or UTF-32.

- fixed detection of final \0 as illegal non-whitespace garbage. Fixes
  spectest 'n_number_then_00'. #72

- warn with unicode noncharacters as in core when not in relaxed mode.
  #74

- fail decode of non-unicode raw characters above U+10FFFF
  when not in relaxed mode.

=item B-C 1.54_15

Fixed IsCOW savepvn, store the last cowrefcnt.

Fixed wrong savepvn length, failing with asan.

Optimized mro_isa_changed_in initialization.

=item Net-Ping 2.55

Fixed missing C<_unpack_sockaddr_in> family, which took AF_INET6 for
a AF_INET addr in F<t/500_ping_icmp.t> and F<t/500_ping_icmp_ttl.t>.
Use now a proper default. Detected by the new gitlab ci.

Fixed C<_pack_sockaddr_in> for a proper 2nd argument type, hash or packed
address.

Improved F<500_ping_icmp.t> to try C<sudo -n> for tests requiring root,
plus adding -n fir fixing [RT #118451].
Relaxed more tests failing with firewalled icmp on localhost. [RT #118441]

Fixed C<ping_external> argument type, either packed ip or hostname. [RT #113825]

Fixed wrong skip message in F<t/020_external.t>

=item Pod-HTML 2.22c

Improved parallel testing, relative F<testdir/test$$.lib>.
See L<[RT #118416]|https://rt.cpan.org/Ticket/Display.html?id=118416>.

=item Unicode-Collate 1.19

Many new locales. Some major fixes.

=item version  0.9917_02c

Merge latest version with the '_' lyon concensus with the cperl extension
of the optional final 'c' suffix. Extend version::regex for cperl.
Now also parse the 'c' natively.

=back

=head1 Documentation

=head2 Changes to Existing Documentation

=head3 L<perldata>

=over 4

=item *

Added new cperl v5.25.2c restrictions for L<perldata/Identifier parsing>:
No undeclared mixed scripts, normalization to NFC and no binary symbols.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

A new C<-Dmv> debugging mode for verbose arena memory debugging was added,
similar to C<-Dm> and C<env PERL_MEM_LOG=s>.

=head3 New Errors

=over 4

=item *

L<Malformed UTF-8 character in compose (empty string)|perldiag/"Malformed UTF-8 character in compose (empty string)">

L<Malformed UTF-8 character in decompose (empty string)|perldiag/"Malformed UTF-8 character in compose (empty string)">

L<Malformed UTF-8 character in reorder (empty string)|perldiag/"Malformed UTF-8 character in compose (empty string)">

New unicode identifier normalization errors.

=back

=head3 New Warnings

=over 4

=item *

L<Invalid script %s in identifier for U+%04|perldiag/"Invalid script %s in identifier for U+%04">

=item *

L<Invalid \0 character in string for SYMBOL: %s|perldiag/"Invalid \0 character in string for SYMBOL: %s">

=back

=head1 Utility Changes

=head2 L<c2ph>

=over 4

=item *

Removed all the old C<'> package seperators, and lexicalized most internal variables from
B<c2ph>. But it is not yet completely strict safe.
See L</Removed ' as package seperator> and
L<[cperl #217]|https://github.com/perl11/cperl/issues/217>.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Solaris

With the SunPro cc compiler we use now the C<__global> declaration
for exported functions, similar to Windows C<__declspec(dllexport)>.

This is hidden under the new C<GLOBAL> macro.

=back

=head1 Configuration and Compilation

=over 4

=item arflags

Probe for arflags, which do support C<D> for deterministic static archives
without member timestamps. On darwin we currently only have F<llvm-ar-mp-3.9>
(since 3.7) which does support this.

ranlib is probed for the C<-D> flag for reproducible build determinism.

=item fixed longdblinfbytes probe

With Intel long double it didn't clean random excess garbage bytes
after the 10th byte.

=item cperl build helper scripts

Added the following release scripts to F<Porting:> F<do-conf-clean>
F<do-conf-cperl-release> F<do-make-cperl-release>
F<do-make-srctarball> F<perl_version> for Linux (debian and rpm) and
Darwin.

Those builds are now reproducible, see below.

=item reproducible builds

cperl has now support for automatic reproducible builds on most platforms.
A new B<cf_epoch> config key was added.

The config key B<cf_time> is now based on: 1. SOURCE_DATE_EPOCH,
2. with .git the newest file in the repository, or 3. the newest file
in the MANIFEST.

Builds are done with C<LC_ALL=C> and C<PERL_HASH_SEED=0>, but builds are still
LANGUAGE or compiler specific.

Those builds are reproducible when done on the same machine and user.
Otherwise set the keys: cf_by, cf_email, mydomain, myhostname, myuname also.

See L<[cperl #169]|https://github.com/perl11/cperl/issues/169>.

=item passcat

This suspicious Config key was removed from cperl.
If you have a NIS database use C<ypcat passwd>.
passcat is not used in any public CPAN module.

=item fake_signatures

Ask for L<fake_signatures> being compiled in as default or not.
Defaults to yes with cperl, no without. Sets C<$Config{fake_signatures}>
and defines C<PERL_FAKE_SIGNATURE>.

=item d_llabs

Probe for C<llabs()> needed for PERL_IABS on 32bit with -Duse64bitint,
the default on mingw/cygwin. Defines C<HAS_LLABS>.

=item d_setenv

Probe for C<setenv()> needed on some platforms with strict linkage or
C<-fvisibility=hidden>.

=item d_attribute_always_inline

Probe for C<__attribute__((always_inline))>, which is helpful with
C<clang -flto=thin> for exported mathoms (b) and inlined functions.

The problem is that  C<__attribute__((used))> functions are not inlined.
With always_inline + global visibility, but not C<__attribute__((used))>
we get inlined variants plus exported copies for the API.
Add C<PERL_MATHOM_CALLCONV> to use it.

=back

=head1 Testing

=over 4

=item *

Added F<t/porting/embedcpp.t> to check for perl.h C++ compatibility with a modern
C++ compiler. There must be no fatal compilation errors in the C<-c> step from
C++ incompatibilities in any perl header file.

Note that Microsoft Visual C++ still throws errors. You cannot use that yet.
See L<[cperl #227]|https://github.com/perl11/cperl/issues/227>.

This is related to the new C<-Wc++11-compat> and C<-fpermissive> fixes.

=back

=head1 Internal Changes

=over 4

=item *

Support for clang C<-flto> and the new C<-flto=thin> optimization was
added, via C<GLOBAL> declaration and C<__attribute__global__> for
global visibility for all exported API functions, even if not used,
and C<-DLTO>. Note that is not needed for C<gcc -flto>, and the clang
variant produces slower code.

Rudimentary support for C<-fsanitize=cfi> was also added, which is
safer than the old C<-fstack-protector-strong>, but this is not yet
finished.

L<ExtUtils::ParseXS> adds now a correct visibility declaration of
C<XS_EXTERNAL> for C<-flto> and C<-fvisibility=hidden>, which is needed for
C<-fsanitize=cfi> support.

C<Perl_xs_handshake> is now properly exported, which is needed for
C<clang -flto=thin>.

=item *

C<XS_EXTERNAL> and C<XSPROTO> were simplified to use the new C<GLOBAL>
declaration and C<__attribute__global__> attribute, for easier
platform abstractions.

=item *

Added many OP read-write field accessor macros, like C<OpFIRST>,
C<OpLAST>, C<OpOTHER>, C<OpKIDS>, C<OpSPECIAL>, C<OpSTACKED>,
C<OpDEREF>, C<OpWANT_VOID>, C<OpWANT_SCALAR>, C<OpWANT_LIST>.  And
shorter type checks: C<IS_TYPE>, C<ISNT_TYPE>, C<NO_OP_TYPE_OR_WASNT>.

rpeep uses now consistently the local C<o>, and not the global C<PL_op> variable.
See L<[cperl #219]|https://github.com/perl11/cperl/issues/219>.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Fixed the range unicode bug. When the right side of the range is a UTF-8 encoded
string, but the left side not, downgrade the right side to native octets.
E.g.

    my $r = chr 255; utf8::upgrade $r; my $num = ("a" .. $r);
    print $num

should print 26 but does 702, because the utf-8 repr. of C<\x{ff}>
is C<"\303\277" [UTF8 "\x{ff}"]>, and the range was incremented from
"a" to "\x{c3}\x{bf}" instead.
See L<[cperl #218]|https://github.com/perl11/cperl/issues/218>.

=item *

Fixed several issues with C<-Duseshrplib>, a shared F<libcperl.$so>:

install it (!!),
fix ExtUtils::Embed and B-C compilation and testing,
fix tests on darwin,
fix configuration probe of Term::ReadKey.

=item *

Fixed C<sv_dump> of fbm-magic strings which did previously contain the wrong
"VALID,EVALED" string for a flag which is either VALID or EVALED. cperl only.

=item *

Fixed a cperl-only failure in signatures with default blocks introducing
a new lexical variable. As in C<sub t151($a,$b=do{my $f},$c=1){} t151($x,$x,$x)>.
This failure was only fatal on 32bit + -Duse64bitint systems.

C<SIGNATURE_arg_default_op> does not have a items arg.
See L<[cperl #164]|https://github.com/perl11/cperl/issues/164>.
and L<[cperl #213]|https://github.com/perl11/cperl/issues/213>.

=item *

v-strings with a 'c' suffix can now be parsed natively, in C<scan_vstring()>.
See L<[cperl #211]|https://github.com/perl11/cperl/issues/211>.

=back

=head1 Known Problems

For open cperl problems see L<[issues]|https://github.com/perl11/cperl/issues/>.

Some of these fixes also can to be backported from perl5.25.x upstream.

=over 4

=item *

The perl debugger doesn't yet work with signatures. It doesn't step into
such functions and it may fail.
See e.g. L<[cperl #167]|https://github.com/perl11/cperl/issues/167>

=item *

F<t/op/taint.t> contained a test with signatures and 6 default
arguments, which on some 32 bit systems led to random "Reference
parameter cannot take default value at op/taint.t line 2461"
compile-time failures. This test has been rewritten to ony use 4 arguments.

See L<[cperl #164]|https://github.com/perl11/cperl/issues/164>

=item *

C<clang -flto=thin> and on some systems even C<gcc -flto> with C<-O3>
or C<-finline> leads to invisible symbols which were inlined and not
exported, even if they should be declared as public API. Work is
ongoing in the F<feature/gh186-lto-thin> branch, but there the
inlining is disabled by the C<used> attribute, leading to a
10% performance regression.  On the other hand a working
C<clang-3.9 -flto> leads to 20% performance improvements.

=item *

C< until ($x = 1) { ... } > and C< ... until $x = 1 > should
warn when syntax warnings are enabled.
L<[perl #127333]|https://rt.perl.org/Public/Bug/Display.html?id=127333>

=item *

C< ${\vec %h, 0, 1} > and C< ${\substr %h, 0} > should not segfault, rather
the lvalue context should be propagated, and list context properly handled.
L<[perl #128260]|https://rt.perl.org/Public/Bug/Display.html?id=128260>

=back

=head1 Acknowledgements

cperl 5.25.2 represents approximately 2 months of development since cperl 5.25.1c
and contains approximately 44,000 lines of changes across 400 files from 5
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 31,000 lines of changes to 260 .pm, .t, .c and .h files.

The following people are known to have contributed the improvements
that became Perl 5.25.2:

Reini Urban, Tony Cook, Yves Orton, Hugo van der Sanden, Karl Williamson.

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

Generated with:

    cperl Porting/acknowledgements.pl cperl-5.25.1..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<cperlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
