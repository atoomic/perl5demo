__END__
# NAME our @a->{0}
# Somewhat nonsensical, but at least it should not fail an assertion.
our @a->{0};
EXPECT
Can't use an undefined value as a HASH reference at - line 2.
########
# NAME [perl #119809] Attempt to bless into a reference (tied)
sub TIESCALAR { bless [] }
sub FETCH { [] }
tie $t, "";
bless({}, $t);
EXPECT
Attempt to bless into a reference at - line 4.
########
# NAME [perl #119809] Attempt to bless into a reference (magical)
$/ = \1;
bless [], $/
EXPECT
Attempt to bless into a reference at - line 2.
########
# NAME Attempt to bless into a reference after method changes
sub foo{} bless [], bless []
EXPECT
Attempt to bless into a reference at - line 1.
########
# NAME Only pairs in hash assignment, lex
use strict; my @a=(0..2); my %h=@a;
EXPECT
Only pairs in hash assignment allowed while "strict hashpairs", got 3 elements at - line 1.
########
# NAME Invalid unicode variable name
use utf8; use strict "names";
${"\xc3\x28"} = 1;
EXPECT
Invalid identifier "\303(" while "strict names" in use at - line 2.
########
# NAME Invalid unicode variable name from SV
use utf8; use strict "names";
my $s = "\xe2\x28\xa1";
${$s}++
EXPECT
Invalid identifier "\342(\241" while "strict names" in use at - line 3.
########
# NAME Invalid unicode package name
use utf8; use strict "names";
my $s = "\xe2\x28\xa1";
${"$s\::xx"}++
EXPECT
Invalid identifier "\342(\241::xx" while "strict names" in use at - line 3.
########
# NAME Invalid variable name with NUL
use utf8; use strict "names";
${"\xe2\x0\xa1"}
EXPECT
Invalid identifier "\342\0\241" while "strict names" in use at - line 2.
########
# NAME Invalid internal variable name
use strict "names"; ${"\cTAINT"}
EXPECT
Invalid identifier "\24AINT" while "strict names" in use at - line 1.
